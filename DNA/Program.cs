using System.Diagnostics;
using System.Text;

namespace DNA;

class Program
{
    static void Main(string[] args)
    {
        Solution.FindRepeatedDnaSequences("AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT");
        // Solution.FindRepeatedDnaSequences("AAAAAAAAAAAAA");
        // Solution.FindRepeatedDnaSequences("AAAAAAAAAA");
        // Solution.FindRepeatedDnaSequences("GATGGATACTGCATTCGAACCAGAGCCGGCTTTTGCGGGACTAGCATGAGGGACTTGGCTGTTGAGGCTGTACGAGGTCAGTCCTCCGGCAGTGCTATCGCAGGAATTTTTGCAACTCCACTGCTTATAATCCACCAAGTCCAGACTCAAAGCTCAACTCGGGGATCGCACGGTATGGTCACTGTCGCGCATGCAGTAATAGTCCAGACGAACGCACATTGGTCGTCCCCTGAGCCCGTGCCAGCCTAATACTTCTTATGCCTGCGTAAGTAGACTTTGCCAACGTAATCTCATCCTTATGCCAGATTATTAGTTCATTGAATGTCGGTCGCCGGCGCTCCCGCATTTCTTATCCGCGTATCTTGGGGTCAAGACGTCCCCAGCTTGTTAATACAAGCTACTTTCCCTCGCAATTACTAAGTTCGTGACAAGCGAATCACGCTAAGATGTTATTGGACTCTACAGAAATATTGAATTGACAACATTCGTCTGTTCAGATCGTCGTTCACGCCACTGATAGCGCAGCTCGAGCACTCTGGAGCCACAATGCGGAATGTCCAGAACCTTTGCGCAAGAGTCCGTGGAAAGCATAATCGTGAACAGAATGGCTAGCCGAGGTGCGCAAGGATAGGACCGTCTACACAAAGTATGGGCACCACGCACATCGACACCCCGTAGTGTGTCAGTCGGCTCAGCGGCTAATGGGTTCGGCGTGAGGAATAGAAATAATAGGCAGTGGTGCCAATTGTGGGGTCTTCTTTTGACTTTCTCATCTCTCTATGAATCAGATCGGCCTCTCGCCCCCGCCGGCCCTCTGGCTTTTTTAAATCCTAGATTGTGCACGTGCCCCGGTTTCCTTCAAGGCAAGTGAAGCGCGTCTTTGCTCTAAACCCACGGCCGTTGCACGGCGCCGAACAGGTGTCTCGGTGCGACCGGAGTGAGCAAGTTCTGTCCGCATCGTATGATTATACCCCCTCCTGTCACGGCTCGGGACTTATCGCACCACAGATCAGCTCGCAGCCCCGCGCGAGTACTAGGGACGGGAGGGAAACCAAAGATAATCGTCTTTGCATGGGCCGGCATGTGAATCATTCGTATCATCTTCTGGAGTCTTGTCACGACGATTTTCGATACAGACTGTTGACCCATCTAATCGTGTTGTCAGTCTGGGAACCGTACTTTTTAACCCGTCGTTCGAGCGGCCCGATCAGGGATGCCCGCAGTGTACGGGCACATCGTCGTCTTGGGAACAAAAGCTTGACGGACACCTCTATGCAGACATGAGACGTGAGGCCCCTGCAATAGTGCGGTCACAGGGACCGGCTGTCGATCAGTAGGTATAATCTTGATGTTTGCTGGGAGATTAACAGAGGGCGGAGTTCCGCATCGCCTAACCACTGACAGTCATTGATAGACGCCTAAGTTTGTCCCTGTAGCTACAGTGGTGGCAAAGTGGCCTTGGACGGTTCTGCGCTTGTCAATAAGTCTGTCCCAATCACGAGTGAAAAACTAGCTAGGGTCGGTGATGTGTTTTCAATCATATTTCTCCATCCATCCGGGGCTCCCTAGTACGGAGGAAATCTCCGGGTAACTCTGGATCTCCAGCATTGCGTAAGCAAACCGCCAATCGGGCCGCAGTGAGTTCTTAAACTACGGTTTGGCCCTAATCGCACTATTGGGTGTTGTAGATACGATAGCAAGGTGATTATGAAATCAAGGCACGCACGACCTGTACGTTGATCGTCGAGTGCTCTCGAGTTACTTCATGGGTCAGCCATGCGATTGTCCAAATGGACCGGAAAGTACACTACAAATTGTACCACTGTGCGTTGTACCTCACAAGAACTGTTTGGGTCTACTTACTTTTTACTTGGATCTTTCCTGGTCTCCCTCAGCGTAATTATTCGACACAATGCTGCAGCTGCGTTGTAGTTTTGGCGGTACAGGAAAAATTCTTGTGAGCAACCAGGCCATTCCCTGGAAGGCAGTCCTTGCGAGTATGTTGAGATATATGCTGGGGATGAATTAGAACATTATGCCATCTAAAGTTTGGATTACCGGGGATTCGGCATACCAAATGGATTCGTTGATTATAGCCCCCCCACCTCCTTTTAGGTAAAATGCCCAATCCTGGCGCTGAGCAGGAGGCATGTTGGCCTCTTGTCCGGTAGTACGCTTGACTAGTTCCTAGCGGCGCAAATCACTTGGTCTCTGTCCGTCCTGAATGTTACAAAGCCATATACATGTGTGGAGGTCAAGACATTCCTTATCCGCCCCCCTCGCGATGCAGTTAGATTCGCATTCAAGGTTGAGACCGGAGACCTTCTAACCGGATTTTGGAGTATAGCCCCTTGATAAGAGAAGGAACCATGCTGGGTCTCACGACTATTGAGTTCGGGAAAAGGTGAATGCTCAACGCTAACGCAGTTTGTTACGCCTGGCGGAATAACGTCAGGGACAAACTATATTCTGGCGCCCCAGTGTGGGCTCTTTGACGACATAGGACGGATTAGGCCGGTCTCAACCGCCTCGTAACCCAGGAAGCGGTTCTACTCCCGGCTACTTTTTTGGAGTGTGCAAGGACGTTGCACACAGTGGGTGTCAGATCTAGCCCGTCACATGCAAGTGGTCATATGGATCCCATAATACTCACTGAGTGTCTCGCCAACGGGACTATTAATAGACACGGTGATAGACGGTAGGAATTGTGAGATTCATAATTAGTAACAGTAGGAGCGCCGTAGGCCACGGACCGATACATCGGAACCCTTCGCCGAATACGTTAAGGGTTTGCAACCGGGGGTGCATCTAATCCTTGGGGCTGATCTGTCAAAGGCGTCTCATGCGTGATTATATTAGCGAGAACCTGCATCAATGCTTTAAATAGACAAACCGGTTAATTTGCCAAGAGTTGGGACTACCTGACGGCAAGAGATGGTTAATTGGGCGATTACTTCACGGGTTTGTCTCGATTAAAGAACTAGGATTGCTGTTGTCTTACAAGTTCAGTCATTATCCTTCTGCTATAGCTCTGGATTAGCAATTGGTTTGGGGAAAACCTTTCTCCGTACGAGTAAGGCTGTCGGTAGCCATACTGACTGATCCCGAACACAAAACACTATTCTGTGGAACCAGCAGGTATTAGCATACTGCCCAGTATTCCCGAGTTACGGTTGACTCGGGTCTTAAGCATTTTAAACTGTCCCGATAACCCATTGACTAAGTCCATACATCAGACAAGCTCATGCATCCACTTATACCCGGTGAGAGTAGTTTATGACCAGTAACCGTTACCGAGCCACAGCCACCGCGTGGTGTTGCGGCGCTGTACTATATTATTACTGATGCGGTCCCTAGAGGACTACGCTCCAAGCAAACTTATCTTATTGAAAGTATACACCTAGCAACCTGGGCCGGATTCAATCCGGGATCTGCTCCCCTAGAGCGTTTAATTCGGACCCCTAGTACATAACATTCGGAAATTGGTTCTGGCTTTATGTGGCAATCTGTAATGCAGAAAACATGCTATCGCGCATAAAACCAGTTAAGCTTGATCTCAGATAGTAAAATTCCTGTACCCTCTACAATCCCCCAGAGAAGCTCAGTATACGAACGGAGGAGTAGACTTCGTTACTTGATTCTGGCTACCTCAAAGTCCTCCCTCGAGTTAGAACATGGTGCTCCGTCAGAGGGTTCATTATGGCCGACACGCGAGCTTGCGCTCTGTATGTATGCCGGGGTCCTCTGTCCTGGTGGAGACTGACCATGTACCCCTTATGCCCGGAGAATACCACCTGCTCCACGTGATGCAGCACTGATTGCTCATGGGCGCTCAGCATAGAGATATCTGAGTAGTCCGATACACTTACAGACCGTAAATGCCACTCGGGTTCCTAGCAGAGTGAGGGGTTGCGAATTTTCTGCACATGTAAATTGGGCGTAGACACAACTGTAAAATGCGTCGTAAAAATACAGCTAAGCACCGAACAACGGGATAGGTATTTAGCTAACGTAATTAGTTGTAGAGACACGTAAGCATCCTAGGTCTGACGCTCCCACTATTACGGTGAGTTTGACGCAGAAGTCTTGGTTATGATGCCCTGGATCTGTGAGCTCGGCCTTCCCTGTACAGTGG");
        
        
        // // Use any sort of encoding you like. 
        // var binaryString = ToBinary(ConvertToByteArray("Welcome, World!", Encoding.ASCII));
        // Console.WriteLine(binaryString);
    }

    public static class Solution
    {
        private static int Encode(char c) => c switch
        {
            'A' => 0b00,
            'C' => 0b01,
            'G' => 0b10,
            'T' => 0b11,
            _   => 0
        };
        
        
        
        public static IList<string> FindRepeatedDnaSequences(string s)
        {
            HashSet<string> result = [];
            IList<Int32> seen = [];
            Int32 looking = 0;
            
            for (int left = 0; left < s.Length; left++)
            {
                if (s.Length - left >= 10)
                {
                    foreach (var c in s.Substring(left, 10))
                    {
                        // remove the leftmost 2 bits, shift left, and add a new rightmost base
                        looking = ((looking << 2) & ((1 << 20) - 1)) | Encode(c);
                    }
                    
                    if (seen.Contains(looking)) result.Add(s.Substring(left, 10)); else seen.Add(looking);
                    looking = 0;
                }
            }

            Console.WriteLine($"Result: ");
            foreach (var item in result)
            {
                Console.WriteLine($"[{item} ]");
            }
            
            Console.WriteLine($"Seen: ");
            foreach (var item in seen)
            {
                Console.WriteLine($"[{item} ]");
            }

            return result.ToArray();
        }
    }
}